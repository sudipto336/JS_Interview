when a JS program is run, a global exection context is created and pushed inside call stack

when a fn is invoked, a new exection context is created and pushed inside call stack

exection context is created in 2 phase - 1. Memory creation Phase (variable environment) 2. Code execution phase (thread of execution)

in memory creation phase, memory is allocated to all variable, params, fns and undefined (placeholder) is assigned to variables and reference to fn code (fn definition) is assigned to fns

in code execution phase, code is executed 1 line at a time (synchronous single threaded)

when a fn executio is completed then the execution context for that fn gets deleted and removed from call stack and control goes back to global execution context

when whole code execution gets completed then global execution context gets removed from call stack and call stack becomes empty

hoisting - ability to access variable before declaration and inintialization

lexcal env of any variable - local memory of that variable inside execution context + lexical env of its parent where the variable is lecially present

let and const are hoisted but in temporal dead zone

when global execution context is created then global obj and this keyword are created and variables & fns gets attached to window obj and this keyword

when an execution context is created reference to lexical scope of parent is also created

temporal dead zone - time span between a let/const variable is hoisted till the time it is assigned some value

in temporal dead zone any let/const variable cant be accessed otherwise reference error is thrown

refernece error (not defined) is thrown if any variable is accessed which is not present in current scope (whole code)

undefined - obtained when accessing a variable is allocated memory but not assigned any value

not defined - obtained when accessing a variable is not present in current scope (whole code), so memory is not allocated to that variable

closure - function bundled with its lexical env forms closure (fn + its lexical env)

closure is used in memoization, currying etc.

due to closure, fn can remember its lexical env (reference to variable present in lexical env) even outside its scope

let, const - block scoped

var - fn scoped

fn statement/declaration vs fn expression - hoisting - calling fn expression before expression throws error as the variable stores undefined in memory before hitting the line of assigning, but fn statement/declaration deos not as it stores whole fn body in memory

first class fn/citizen - ability of fn to be used as value - fn can be passed to another fn, can be returned from a fn, can be assigned to a variable

callback fn - a fn which is passed as arg to higher order fn

higher order fn - a fn which takes a fn as arg or returns a fn - helps in reusuability of code - ex: map, filter, reduce

functional programming - higher order fn, fn being used as value, fn passed as arg or returned from a fn, pure fn, splitting code into small fns - helps in modularity, reusuability

callback fn passed to map/filter/reduce runs against each element of array

map - used to transform each element of array and return a new array with transformed values - can be used to get double/triple/binary of each element of array

filter - used to filter out elements from array - can be used to get even/odd elements of array

reduce - used to get single value from array - can be used to get max/sum of elements of array

closure - a fn along with its lexical/sorrounding/outer env/scope bundled together forms closure

due to closure, a fn can remember and access variables present in its lexical env even if the fn called outside its scope

advantage of closure - used in currying, some higher order fns (memoize, once), data hiding/encapsulation (data cant be accessed by other fn/code), modular design pattern

disadvantage of closure - consumes lots of memory as memory held by variables of closure do not get garbage collected

when a fn called multuple times, each time it creates separate copy of closure variables etc.

to perform any async operation after another operation, wrap that operation code inside a fn and pass to the another fn

we can perform async operation by wrapping the code inside a fn and pass that fn as callback to setTimeout

callback fn is a fn which is passed to another fn (higher order fn) and that callback fn gets called later by the another fn

advantage of callback - it is used to handle async operation

disadvantage of callback - 
a. callback hell (callback inside callback and so on) - code grows vertically not horizontally - makes code unmaintainable and unreadable
b. inversion of control (giving control of code to another code by passing callback fn to another fn)

issues of callback can be handled using promise

promise obj gets filled with the result of async operation after a certian period of time

a success callback fn is attached to promise obj using then() 

a failure callback fn is attached to promise obj using catch()

in promise, we do not pass a fn to another fn, rather we attach callback fn to promise obj, so it prevents inversion of control

when promise gets resolved/fulfilled, then promise obj gets filled with data returned by async operation and then success callback fn gets called only once

when promise gets rehected, then failure callback fn gets called only once

promise obj is immutable

promise obj contains promise reuslt and promise state

promise state - pending, fulfilled, rejected

promise can be resolved only once

callback hell can be handled using promise chain

in each level of promise chain, we need to return data/promise

catch() handles any error thrown by any promise obj at any level above the catch()

resolve, reject - provided by js

Promise APIs - used to handle parallel API calls - Promise.all(), Promise.allSettled(), Promise.race(), Promise.any() - all takes array of promises

Promise.all() - it will wait for all promises to be fulfilled and returns array of result of all promises - if any 1 of the promise fails, it throws error immidiately - fail fast (if all success, then return result if any fails, return error)

Promise.allSettled() - it will wait for all promises to be settled (either fulfilled/rejected) and returns array of result of all promises  - if any promise is fulfilled then it will include value of result in the array or if any promise is rejected then it will include the error in the array - the returned array contains obj with properties status and value(result)/reason(error)

Promise.race() - it returns result of first settled promise (either fulfilled/rejected) - returns a single value (result value or error)

Promise.any() - it waits for first fulfilled promise (success) and returns the result of that - if all fails then it will return AggregateError with array of all errors - seeking first success

settled - got result (fulfilled/resolved/success or rejected/rejected/failure)

